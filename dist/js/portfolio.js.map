{"version":3,"sources":["js/portfolio.js"],"names":["Shuffle","window","this","element","itemSelector","easing","shuffle","querySelector","speed","addShuffleEventListeners","_activeFilters","addFilterButtons","Demo","prototype","toggleMode","mode","on","EventType","LAYOUT","data","REMOVED","console","log","options","Array","from","children","forEach","button","addEventListener","_handleFilterClick","bind","filterButtons","evt","btn","currentTarget","isActive","classList","btnGroup","getAttribute","splice","indexOf","toggle","filter","_removeActiveClassFromChildren","parentNode","filterGroup","remove","add","parse","_typeof","parent","document","demo","app","menu","menu_bar","menuItems","applyListeners","toggleClass","stringClass","contains","body","init","firstElementChild","querySelectorAll"],"mappings":"AAAA,mOAEIA,QAAUC,OAAOD,QAAjBA,KAAAA,SAAiBA,GAGnBE,KAAKC,QAAUA,EAAfD,KAAKC,QAAUA,GAAAA,SAAfA,GAGEC,aAAc,gBADhBC,OAAKC,2CACHF,MAAAA,IACAC,MAAAA,EAAQE,cAAA,qBACRC,YAHkC,IASpCN,KAAKO,2BAALP,KAAKO,kBAELP,KAAKQ,mBAELR,KAAKS,KAAAA,YAGNC,MAnBDC,UAAAC,WAAA,WAsBoB,aAAdZ,KAAKa,KADXH,KAAKC,KAAUC,YAEXZ,KAAKa,KAAO,YAUhBH,KAAKC,UAAUJ,yBAA2B,WACxCP,KAAKI,QAAQU,GAAGhB,QAAQiB,UAAUC,OAAQ,SAAUC,GADtDP,QAAKC,IAAUJ,gBAAAA,KAGZP,KAFDI,QAAAU,GAAAhB,QAAAiB,UAAAG,QAAA,SAAAD,GAKEE,QAAQC,IAAI,iBAAkBH,MAEjCP,KARDC,UAAAF,iBAAA,WAUAC,GAAKC,GAAUF,SAAAA,cAAmB,gBAEhC,IADAU,QAAAC,IAAA,YAAAC,GACIA,EAAJ,CAICC,MAAAC,KAAAF,EAAAG,UAGDC,QAAA,SAAAC,GAGEA,EAAOC,iBAAiB,QAAS3B,KAAK4B,mBAAmBC,KAAK7B,OAAO,IADvE8B,QAGDpB,KAdDC,UAAAiB,mBAAA,SAAAG,GAiBE,GAAIC,GAAMD,EAAIE,cADXtB,EAAUiB,EAAAA,UAAAA,SAAqB,UAC9BI,EAAUC,EAAAA,aAAd,aASA,IARAd,QAAIe,IAAAA,QAAeC,GACnBhB,QAAIiB,IAAAA,aAAeC,GAOnB,aAAArC,KAAAa,KAEIqB,EACFlC,KAAAQ,eAAA8B,OAAAtC,KAAAQ,eAAA+B,QAAAH,IAEEpC,KAAKQ,eAAe8B,KAAAA,GAGrBN,EAAAG,UAAAK,OAAA,UAKDxC,KAAKI,QAAQqC,OAAOzC,KAAKQ,oBAGpB,CADPR,KAAA0C,+BAAAV,EAAAW,WAEE,IAAAC,GAAKF,QAAAA,SAGDR,GADJF,EAAIY,UAAAA,OAAc9C,WAEhBkC,EAAIG,UAAUU,IAAAA,UADhBT,QAAAA,IAGEJ,EAAcc,KAAIC,MAAlBX,KAIAjB,QAAAC,IAAA,gBAAAwB,GACDzB,QAAAC,IAAA,cAAA,KAAAwB,EAAA,YAAAI,QAAAJ,IACDzB,KAAAA,QAAYsB,OAAAG,KAKflC,KA5CDC,UAAA+B,+BAAA,SAAAO,GA8CAvC,IAAKC,GACCa,GAAWyB,EAAOzB,SADnBb,EAAU+B,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,IACblB,EAAIA,GAAAA,UAAkBA,OAAtB,WAOF0B,SAASvB,iBAAiB,mBAAoB,WAA9CuB,OAASvB,KAAAA,GAAAA,MAATuB,SAA0B7C,cAAoB,0BAC5CN,OAAOoD,KAAP/C,QAAkBM,UAapB,IAAM0C,KAAO,WAAb,GAAMA,OAAAA,GACLC,MAAAA,GACAC,MAAAA,GACAC,MAAAA,GAeMC,EAAiB,WAAvBH,EAAMG,iBAAiB,QAAjBA,WACLH,EAAK1B,EAAAA,cACD8B,EAAAA,EAAkB,kBAMjBA,EAAc,SAACxD,EAASyD,GAC3BzD,EAAAkC,UAAAwB,SAAAD,GADHzD,EAAAkC,UAAAU,OAAAa,GAEGzD,EAAKA,UAAQkC,IAAUwB,KArBb,WAAbC,EAAMC,SAAOxD,cAAM,QAClBuD,EAAAA,SAAOV,cAAS7C,cAChBgD,EAAOH,EAAAA,kBACPI,QAAAA,IAAAA,aAAgBQ,GAChB3C,EAAQC,SAAI2C,iBAAZ,mBAIAP","file":"portfolio.js","sourcesContent":["'use strict';\n\nvar Shuffle = window.Shuffle;\n\nvar Demo = function (element) {\n  this.element = element;\n\n  this.shuffle = new Shuffle(element, {\n    itemSelector: '.picture-item',\n    easing: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)', // easeOutQuart\n    speed: 300,\n    sizer: element.querySelector('.my-sizer-element'),\n    isCentered: false\n  });\n\n  // Log events.\n  this.addShuffleEventListeners();\n\n  this._activeFilters = [];\n\n  this.addFilterButtons();\n\n  this.mode = 'exclusive';\n};\n\nDemo.prototype.toggleMode = function () {\n  if (this.mode === 'additive') {\n    this.mode = 'exclusive';\n  } else {\n    this.mode = 'additive';\n  }\n};\n\n/**\n * Shuffle uses the CustomEvent constructor to dispatch events. You can listen\n * for them like you normally would (with jQuery for example).\n */\nDemo.prototype.addShuffleEventListeners = function () {\n  this.shuffle.on(Shuffle.EventType.LAYOUT, function (data) {\n    console.log('layout. data:', data);\n  });\n\n  this.shuffle.on(Shuffle.EventType.REMOVED, function (data) {\n    console.log('removed. data:', data);\n  });\n};\n\nDemo.prototype.addFilterButtons = function () {\n  //var options = document.querySelector('.filter-options');\n  var options = document.querySelector('.button-group')\n  console.log(\"options: \", options);\n  if (!options) {\n    return;\n  }\n\n  var filterButtons = Array.from(options.children);\n  //console.log('filterButtons:', filterButtons);\n\n  filterButtons.forEach(function (button) {\n    button.addEventListener('click', this._handleFilterClick.bind(this), false);\n  }, this);\n};\n\nDemo.prototype._handleFilterClick = function (evt) {\n  var btn = evt.currentTarget;\n  var isActive = btn.classList.contains('active');\n  var btnGroup = btn.getAttribute('data-value');\n  console.log(\"btn: \", btn);\n  console.log(\"btnGroup: \", btnGroup);\n  //console.log(\"isActive: \", isActive);\n\n  // You don't need _both_ of these modes. This is only for the demo.\n\n  // For this custom 'additive' mode in the demo, clicking on filter buttons\n  // doesn't remove any other filters.\n  if (this.mode === 'additive') {\n    // If this button is already active, remove it from the list of filters.\n    if (isActive) {\n      this._activeFilters.splice(this._activeFilters.indexOf(btnGroup));\n    } else {\n      this._activeFilters.push(btnGroup);\n    }\n\n    btn.classList.toggle('active');\n\n    // Filter elements\n    this.shuffle.filter(this._activeFilters);\n\n  // 'exclusive' mode lets only one filter button be active at a time.\n  } else {\n    this._removeActiveClassFromChildren(btn.parentNode);\n\n    var filterGroup = Shuffle.ALL_ITEMS;\n    if (isActive) {\n      btn.classList.remove('active');\n    } else {\n      btn.classList.add('active');\n      if (btnGroup !== `all`) {\n        filterGroup = JSON.parse(btnGroup);\n      }\n      //filterGroup = btnGroup\n    }\n    console.log(\"filterGroup: \", filterGroup);\n    console.log(\"typeof \", typeof(filterGroup));\n    this.shuffle.filter(filterGroup);\n    //this.shuffle.filter(Shuffle.ALL_ITEMS)\n  }\n};\n\nDemo.prototype._removeActiveClassFromChildren = function (parent) {\n  var children = parent.children;\n  for (var i = children.length - 1; i >= 0; i--) {\n    children[i].classList.remove('active');\n  }\n};\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  window.demo = new Demo(document.querySelector('.my-shuffle-container'));\n  window.demo.shuffle.layout();\n  //window.demo.shuffle.update();\n});\n\n/**\n$(\".menu-toggle\").on('click', function() {\n  $(this).toggleClass(\"on\");\n  $('.menu-section').toggleClass(\"on\");\n  $(\"nav ul\").toggleClass('hidden');\n  $('#wrapper').toggleClass('hidden');\n});\n*/\nconst app = (() => {\n\tlet body;\n\tlet menu;\n\tlet menu_bar;\n\tlet menuItems;\n  let wrapper;\n\n\tconst init = () => {\n\t\tbody = document.querySelector('body');\n\t\tmenu = document.querySelector('.menu-icon');\n\t\tmenu_bar = menu.firstElementChild;\n\t\tconsole.log(\"menu-bar: \", menu_bar);\n\t\tmenuItems = document.querySelectorAll('.nav__list-item');\n    //wrapper = document.querySelector('#wrapper');\n\n\t\tapplyListeners();\n\t}\n\n\tconst applyListeners = () => {\n\t\tmenu.addEventListener('click', () => {\n      toggleClass(body, 'nav-active');\n\t\t\ttoggleClass(menu_bar, 'menu-active');\n      //toggleClass(wrapper, 'hidden')\n    });\n\t}\n\n\tconst toggleClass = (element, stringClass) => {\n    //console.log(\"element: \", element);\n    if (!element.classList.contains(stringClass)) {\n      element.classList.add(stringClass);\n    }\n\t\telse\n\t\t\telement.classList.remove(stringClass);\n\t}\n\n\tinit();\n})();\n"]}