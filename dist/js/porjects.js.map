{"version":3,"sources":["js/porjects.js"],"names":["Shuffle","window","this","element","itemSelector","easing","shuffle","querySelector","addShuffleEventListeners","_activeFilters","addFilterButtons","Demo","prototype","toggleMode","mode","on","EventType","LAYOUT","data","REMOVED","console","log","options","filterButtons","Array","from","children","forEach","button","addEventListener","_handleFilterClick","bind","evt","btn","currentTarget","isActive","classList","btnGroup","getAttribute","splice","indexOf","toggle","filter","_removeActiveClassFromChildren","parentNode","filterGroup","remove","add","parse","_typeof","parent","document"],"mappings":"AAAA,mOAEIA,QAAUC,OAAOD,QAAjBA,KAAAA,SAAiBA,GAGnBE,KAAKC,QAAUA,EAAfD,KAAKC,QAAUA,GAAAA,SAAfA,GAGEC,aAAc,gBADhBC,OAAKC,2CACHF,MAAAA,IACAC,MAAAA,EAAQE,cAAA,uBAMVL,KAAKM,2BAALN,KAAKM,kBAELN,KAAKO,mBAELP,KAAKQ,KAAAA,YAGNC,MAlBDC,UAAAC,WAAA,WAqBoB,aAAdX,KAAKY,KADXH,KAAKC,KAAUC,YAEXX,KAAKY,KAAO,YAUhBH,KAAKC,UAAUJ,yBAA2B,WACxCN,KAAKI,QAAQS,GAAGf,QAAQgB,UAAUC,OAAQ,SAAUC,GADtDP,QAAKC,IAAUJ,gBAAAA,KAGZN,KAFDI,QAAAS,GAAAf,QAAAgB,UAAAG,QAAA,SAAAD,GAKEE,QAAQC,IAAI,iBAAkBH,MAEjCP,KARDC,UAAAF,iBAAA,WAUAC,GAAKC,GAAUF,SAAAA,cAAmB,gBAEhC,IADAU,QAAAC,IAAA,YAAAC,GACIA,EAAJ,CAIC,GAAAC,GAAAC,MAAAC,KAAAH,EAAAI,SAGDN,SAAQC,IAAI,iBAAkBE,GAA9BH,EAAYO,QAAA,SAAkBJ,GAG5BK,EAAOC,iBAAiB,QAAS3B,KAAK4B,mBAAmBC,KAAK7B,OAAO,IADvEqB,QAGDZ,KAdDC,UAAAkB,mBAAA,SAAAE,GAiBE,GAAIC,GAAMD,EAAIE,cADXtB,EAAUkB,EAAAA,UAAAA,SAAqB,UAC9BG,EAAUC,EAAAA,aAAd,aASA,IARAd,QAAIe,IAAAA,QAAeC,GACnBhB,QAAIiB,IAAAA,aAAeC,GAOnB,aAAApC,KAAAY,KAEIqB,EACFjC,KAAAO,eAAA8B,OAAArC,KAAAO,eAAA+B,QAAAH,IAEEnC,KAAKO,eAAe8B,KAAAA,GAGrBN,EAAAG,UAAAK,OAAA,UAKDvC,KAAKI,QAAQoC,OAAOxC,KAAKO,oBAGpB,CADPP,KAAAyC,+BAAAV,EAAAW,WAEE,IAAAC,GAAKF,QAAAA,SAGDR,GADJF,EAAIY,UAAAA,OAAc7C,WAEhBiC,EAAIG,UAAUU,IAAAA,UADhBT,QAAAA,IAGEJ,EAAcc,KAAIC,MAAlBX,KAIAjB,QAAAC,IAAA,gBAAAwB,GACDzB,QAAAC,IAAA,cAAA,KAAAwB,EAAA,YAAAI,QAAAJ,IACDzB,KAAAA,QAAYsB,OAAAG,KAKflC,KA5CDC,UAAA+B,+BAAA,SAAAO,GA8CAvC,IAAKC,GACCc,GAAWwB,EAAOxB,SADnBd,EAAU+B,EAAAA,OAAAA,EAAAA,GAAAA,EAAAA,IACbjB,EAAIA,GAAAA,UAAkBA,OAAtB,WAOFyB,SAAStB,iBAAiB,mBAAoB,WAA9CsB,OAAStB,KAAAA,GAAAA,MAATsB,SAA0B5C,cAAoB","file":"porjects.js","sourcesContent":["'use strict';\n\nvar Shuffle = window.Shuffle;\n\nvar Demo = function (element) {\n  this.element = element;\n\n  this.shuffle = new Shuffle(element, {\n    itemSelector: '.picture-item',\n    easing: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)', // easeOutQuart\n    speed: 300,\n    sizer: element.querySelector('.my-sizer-element'),\n  });\n\n  // Log events.\n  this.addShuffleEventListeners();\n\n  this._activeFilters = [];\n\n  this.addFilterButtons();\n\n  this.mode = 'exclusive';\n};\n\nDemo.prototype.toggleMode = function () {\n  if (this.mode === 'additive') {\n    this.mode = 'exclusive';\n  } else {\n    this.mode = 'additive';\n  }\n};\n\n/**\n * Shuffle uses the CustomEvent constructor to dispatch events. You can listen\n * for them like you normally would (with jQuery for example).\n */\nDemo.prototype.addShuffleEventListeners = function () {\n  this.shuffle.on(Shuffle.EventType.LAYOUT, function (data) {\n    console.log('layout. data:', data);\n  });\n\n  this.shuffle.on(Shuffle.EventType.REMOVED, function (data) {\n    console.log('removed. data:', data);\n  });\n};\n\nDemo.prototype.addFilterButtons = function () {\n  //var options = document.querySelector('.filter-options');\n  var options = document.querySelector('.button-group')\n  console.log(\"options: \", options);\n  if (!options) {\n    return;\n  }\n\n  var filterButtons = Array.from(options.children);\n  console.log('filterButtons:', filterButtons);\n\n  filterButtons.forEach(function (button) {\n    button.addEventListener('click', this._handleFilterClick.bind(this), false);\n  }, this);\n};\n\nDemo.prototype._handleFilterClick = function (evt) {\n  var btn = evt.currentTarget;\n  var isActive = btn.classList.contains('active');\n  var btnGroup = btn.getAttribute('data-value');\n  console.log(\"btn: \", btn);\n  console.log(\"btnGroup: \", btnGroup);\n  //console.log(\"isActive: \", isActive);\n\n  // You don't need _both_ of these modes. This is only for the demo.\n\n  // For this custom 'additive' mode in the demo, clicking on filter buttons\n  // doesn't remove any other filters.\n  if (this.mode === 'additive') {\n    // If this button is already active, remove it from the list of filters.\n    if (isActive) {\n      this._activeFilters.splice(this._activeFilters.indexOf(btnGroup));\n    } else {\n      this._activeFilters.push(btnGroup);\n    }\n\n    btn.classList.toggle('active');\n\n    // Filter elements\n    this.shuffle.filter(this._activeFilters);\n\n  // 'exclusive' mode lets only one filter button be active at a time.\n  } else {\n    this._removeActiveClassFromChildren(btn.parentNode);\n\n    var filterGroup = Shuffle.ALL_ITEMS;\n    if (isActive) {\n      btn.classList.remove('active');\n    } else {\n      btn.classList.add('active');\n      if (btnGroup !== `all`) {\n        filterGroup = JSON.parse(btnGroup);\n      }\n      //filterGroup = btnGroup\n    }\n    console.log(\"filterGroup: \", filterGroup);\n    console.log(\"typeof \", typeof(filterGroup));\n    this.shuffle.filter(filterGroup);\n    //this.shuffle.filter(Shuffle.ALL_ITEMS)\n  }\n};\n\nDemo.prototype._removeActiveClassFromChildren = function (parent) {\n  var children = parent.children;\n  for (var i = children.length - 1; i >= 0; i--) {\n    children[i].classList.remove('active');\n  }\n};\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  window.demo = new Demo(document.querySelector('.my-shuffle-container'));\n});\n"]}